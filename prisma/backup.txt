// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  users         users[]
}

model users {
  id          String   @id @default(cuid())
  userId      String
  name        String
  email       String
  tel         String?  @db.VarChar
  address     String?
  birth       String?
  created_at  DateTime @updatedAt
  updated_at  DateTime @updatedAt

  reservations        reservations[]

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model items {
  id                  String  @id @default(cuid())
  name                String
  category            BigInt
  price               String
  capacity            String?
  maximum_temperature String?
  created_at          DateTime @updatedAt
  updated_at          DateTime @updatedAt

  reservations        reservations[]
}

model reservations {
  id           String  @id @default(cuid())
  user_id      String
  items_id     String
  start_time   DateTime
  end_time     DateTime
  people_cont  Int
  created_at   DateTime @updatedAt
  updated_at   DateTime @updatedAt

  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items        items    @relation(fields: [items_id], references: [id], onDelete: Cascade)
}
